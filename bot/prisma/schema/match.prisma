model Match {
  id          String      @id @default(cuid())
  matchType   MatchType
  status      MatchStatus @default(PENDING)
  bestOf      Int         @default(3)
  homeScore   Int         @default(0)
  awayScore   Int         @default(0)
  winner      String?
  matchData   Json?
  scheduledAt DateTime?
  startedAt   DateTime?
  finishedAt  DateTime?
  createdAt   DateTime    @default(now())

  homeTeamId String
  awayTeamId String
  homeTeam   Team @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam   Team @relation("AwayTeam", fields: [awayTeamId], references: [id])

  playerStats MatchStats[]

  @@map("matches")
}

model MatchStats {
  id               String @id @default(cuid())
  points           Int    @default(0)
  kills            Int    @default(0)
  blocks           Int    @default(0)
  digs             Int    @default(0)
  assists          Int    @default(0)
  aces             Int    @default(0)
  errors           Int    @default(0)
  attackAttempts   Int    @default(0)
  attackHits       Int    @default(0)
  blockAttempts    Int    @default(0)
  serveAttempts    Int    @default(0)
  experienceGained Int    @default(0)
  matchId          String
  characterId      String

  match     Match     @relation(fields: [matchId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([matchId, characterId])
  @@map("match_stats")
}

enum MatchType {
  SCRIMMAGE
  RANKED
  TOURNAMENT
  CHAMPIONSHIP
}

enum MatchStatus {
  PENDING
  IN_PROGRESS
  FINISHED
  CANCELLED
}
