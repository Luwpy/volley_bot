model Character {
  id         String @id @default(cuid())
  name       String
  level      Int    @default(1)
  experience Int    @default(0)

  height Int @default(170)

  power     Int @default(50)
  speed     Int @default(50)
  technique Int @default(50)
  jump      Int @default(50)
  stamina   Int @default(50)
  mental    Int @default(50)

  attack  Int @default(50)
  block   Int @default(50)
  receive Int @default(50)
  serve   Int @default(50)
  set     Int @default(50)

  energy     Int @default(100)
  motivation Int @default(100)

  primaryPosition   Position  @default(WS)
  secondaryPosition Position?
  personalityId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Member   Member? @relation(fields: [memberId], references: [id])
  memberId String?

  personality       Personality          @relation(fields: [personalityId], references: [id])
  items             CharacterItem[]
  learnedTechniques CharacterTechnique[]
  trainingRecords   TrainingRecord[]
  matchStats        MatchStats[]
  teamMemberships   TeamMember[]
  

  captainOf Team? @relation("TeamCaptain")

}


model CharacterTechnique {
    id          String @id @default(cuid())
    proficiency Int    @default(1)
    experience  Int    @default(0)

    characterId String
    techniqueId String

    character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
    technique Technique @relation(fields: [techniqueId], references: [id], onDelete: Cascade)

    @@unique([characterId, techniqueId])
    @@map("character_techniques")
}

model TrainingRecord {
    id           String       @id @default(cuid())
    trainingType TrainingType
    duration     Int // minutes
    intensity    Int // 1-5 intensity level

    // Stats gained from training
    powerGain     Int @default(0)
    speedGain     Int @default(0)
    techniqueGain Int @default(0)
    jumpGain      Int @default(0)
    staminaGain   Int @default(0)
    mentalGain    Int @default(0)

    // Energy/motivation cost
    energyCost     Int @default(0)
    motivationCost Int @default(0)

    completedAt DateTime @default(now())

    // Foreign keys
    characterId String

    // Relations
    character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

    @@map("training_records")
}

model CharacterItem {
    id       String  @id @default(cuid())
    quantity Int     @default(1)
    equipped Boolean @default(false)

    // Foreign keys
    characterId String
    itemId      String

    // Relations
    character      Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
    item           Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
    

    // Prevent duplicate character-item pairs
    @@unique([characterId, itemId])
    @@map("character_items")
}

enum TrainingType {
    POWER_TRAINING // Weight training, spike practice
    SPEED_TRAINING // Agility, footwork drills
    TECHNIQUE_TRAINING // Ball handling, precision
    JUMP_TRAINING // Plyometrics, vertical training
    STAMINA_TRAINING // Endurance, cardio
    MENTAL_TRAINING // Strategy, focus exercises
    TEAM_PRACTICE // Scrimmage, coordination
    RECOVERY // Rest and recovery
}

enum Position {
    WS // Wingspiker
    SE // Setter
    MB // Middle Blocker
    LB // Libero
    OH // Outside Hitter
}
